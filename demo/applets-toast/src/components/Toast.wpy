<template lang="wxml">
	
	<view class="ui-toast  {{ className }}" hidden="{{ !visible }}">
		<view class="ui-toast_bd">
			<icon wx:if="{{ options.icon}}" type="{{ options.icon }}" size="40" color="{{ options.color }}" class="ui-toast_icon" />
			<view class="ui-toast_text">{{ options.text }}</view>
		</view>
	</view>
</template>

<script>


	import wepy from 'wepy';
	const __timer__ =1900;
	//方法以 ： __XX__ 命名，因并入其他组件中后，可能引起方法名重复
	class Toast extends wepy.component {
		/**
		 * 默认数据
		 */
		data={
			 list:[
				{
					type: `success`,
					icon: `success`,
					className: `ui-toast-success`,
				},
				{
					type: `cancel`,
					icon: `cancel`,
					className: `ui-toast-cancel`,
				},
				{
					type: `forbidden`,
					icon: `warn`,
					className: `ui-toast-forbidden`,
				},
				{
					type: `text`,
					icon: ``,
					className: `ui-toast-text`,
				},
			],
			timer:null,
			scope: `$ui.toast`, 
			animateCss:'animateCss',
			className:'',
			visible:!1,
			options:{
				type: ``, 
				timer: __timer__, 
				color: `#fff`, 
				text: `已完成`, 
			}
		}
		/**
		 * 默认参数
		 */
		__setDefaults__() {
			return {
				type: `success`, 
				timer: __timer__, 
				color: `#fff`, 
				text: `已完成`, 
				success() {}, 
			}
		}
		/**
     * 设置元素显示
     */
    __setVisible__(className = `ui-animate-fade-in`) {
    	this.className = `${this.animateCss} ${className}`;
    	this.visible = !0;
    	this.$apply();
    }

    /**
     * 设置元素隐藏
     */
    __setHidden__(className = `ui-animate-fade-out`, timer = 300) {
    	this.className = `${this.animateCss} ${className}`;
    	this.$apply();
      setTimeout(() => {
  			this.visible = !1;
  			this.$apply();
      }, timer)
    }
		/**
		 * 显示toast组件
		 * @param {Object} opts 配置项
		 * @param {String} opts.type 提示类型
		 * @param {Number} opts.timer 提示延迟时间
		 * @param {String} opts.color 图标颜色
		 * @param {String} opts.text 提示文本
		 * @param {Function} opts.success 关闭后的回调函数
		 */
		__show__(opts = {}) {
			let options = Object.assign({}, this.__setDefaults__(), opts)
			const TOAST_TYPES = this.list;
			TOAST_TYPES.forEach((value, key) => {
				if (value.type === opts.type) {
					options.icon = value.icon;
					options.className = value.className
				}
			})
			this.options = options;
			if(!this.options.text){
				return ;
			};
			clearTimeout(this.timer);
			this.__setVisible__();
			this.$apply();
			this.timer = setTimeout(() => {
				this.__setHidden__()
				options.success&&options.success();
			}, options.timer);

		}
		__info__(args=[]){
			let [ message, callback, duration ]  = args;
	   	this.__show__({
		    type: 'text',
		    timer: (duration||__timer__),
		    color: '#fff',
		    text: message,
		    success: () => {callback&&callback()}
		  });
	  }
	  __success__(args=[]){
	  	let [ message, callback, duration ]  = args;
	  	this.__show__({
		    type: 'success',
		    timer: (duration||__timer__),
		    color: '#fff',
		    text: message,
		    success: () => {callback&&callback()}
		  });
	  }
	  __warning__(args){
			let [ message, callback, duration ]  = args;
	  	this.__show__({
		    type: 'forbidden',
		    timer: (duration||__timer__),
		    color: '#fff',
		    text: message,
		    success: () => {callback&&callback()}
		  });
	  }
	  __error__(args){
	  	let [ message, callback, duration ]  = args;
	  	this.__show__({
		    type: 'cancel',
		    timer: (duration||__timer__),
		    color: '#fff',
		    text: message,
		    success: () => {callback&&callback()}
		  });
	  }
	  __showLoading__(options){
	  	wx.showLoading({
			  title: (options&&options.title||"加载中"),
			});
	  }
	  __hideLoading__(){
	  	wx.hideLoading();
	  }
	  onLoad(){
      this.$apply()
    }
	}

	export default Toast;
</script>

<style lang="less">
	.ui-toast {
	  position: fixed;
	  left: 0;
	  top: 0;
	  right: 0;
	  bottom: 0;
	  z-index: 9010;
	  display: none; }
	  .ui-toast.ui-animate-fade-in {
	    display: -webkit-box;
	    display: -webkit-flex;
	    display: flex;
	    -webkit-box-align: center;
	    -webkit-align-items: center;
	            align-items: center;
	    -webkit-box-pack: center;
	    -webkit-justify-content: center;
	            justify-content: center; }
	  .ui-toast.ui-animate-fade-out {
	    display: none; }

	.ui-toast_bd {
	  max-width: 70%;
	  min-width: 180rpx;
	  padding: 25rpx 30rpx;
	  border-radius: 12rpx;
	  background: rgba(0, 0, 0, 0.8);
	  color: #fff;
	  text-align: center;
	  font-size: 30rpx; }

	.ui-toast_icon {
	  margin: 10rpx auto 20rpx;
	  display: block; }

	.ui-toast-text {
	  margin: 0 0 30rpx;
	  font-size: 30rpx; }

	.ui-toast-text .ui-toast_bd {
	  min-height: 0;
	  padding: 30rpx;
	  text-overflow: ellipsis; }

	.ui-toast_text,
	.ui-toast-text .ui-toast_text {
	  margin: 0;
	  font-size: 30rpx; }

	.ui-toast-text .ui-toast_icon {
	  display: none; }
</style>